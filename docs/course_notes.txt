01 Front End Wev Development
02 Intro to HTML

  ------element------
  |                 |
  tag---content---tag
  |                 |
  <h1>Hello World</h1>

  header element h1 to h6

    <h1>Hello World</h1>

  paragraph element

    <p>Hello World</p>

  horizontal rule

    <hr />

  break

    <br />

  non void element
    a non void element has an opening tag and a closing tag

    <h1>Hello World</h1>

  void element
    a void element has an opening tag and no closing tag

    <hr />

03 Intermediate HTML

  a. list elements
    unordered list
      this is a bullet point style list
  
      <ul></ul>
  
    ordered list
      this is a numbered/lettered style list
  
      <ol></ol>
  
    list element
      thise list items are inside an ordered or unordered list
  
      <li></li>

  b. nesting and indentation

    <ol>
      <li></li>
      <li></li>
        <ul>
          <li></li>
          <li></li>
        </ul>
      <li></li>
    </ol>



04 Multi Page Websites

  a. html boilerplate

    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Document</title>
    </head>
    <body>
    
    </body>
    </html>

05 Intro CSS
  a. adding css
    inline:
      affects single html tag in single html file
  
      <body>
        <h1 style="color: blue;">Style Me in Blue!</h1>
      </body>
  
    internal:
      affects tags specified in single html file
  
      <head>
        <style>
          h1 {
            color: red;
          }
        </style>
      </head>
  
    external:
      affects all html files pointing to *this stylesheet
  
      index.html
        <head>
          <link rel="stylesheet" href="./style.css" />
        </head>
  
      style.css:
        h1 {
          color: green;
        }

  b. css selectors

    tag
      tags are used in css to apply style to the tag specified

      index.html
        <h1>Hello World</h1>
      style.css
        h1 {
          color: red;
        }

    id
      ids are used to define a single attribute & should only be used to tag
      one single element

      index.html
        <h1 id="red">Hello World</h1>

      style.css
        #red {
          color: red;
        }

    class
      class tags can be used in the html file in multiple locations to group 
      elements together for css style application

      index.html
        <h1 class="red">Hello World</h1>
        class can contain multiple class tags such as class="red header uppercase"
        in which case h1 above would be a member of all 3 different classes

      style.css

        .red {
          color: red;
        }

    all elements (tag/id/class)

      * {
        color: red;
      }
  
    
06 CSS Properties

  a. css colors
    text color:

      h1 {
        color: red;
        }

    background color

      h1 {
        background-color: red;
        }

  b. font properties

    font size:
      pt
        1 point = 1/72 inch
	h1 {
          font-size: 20pt;
        }

      px
        1 pixel = 1/96 inch
	h1 {
          font-size: 20px;
        }

      em
        1em = 100% of parent font size
	h1 {
          font-size: 2em;
        }

      rem
        1rem = 100% of root (<html></html>) font size
	h1 {
          font-size: 2rem;
        }

    font weight:
      100 - 900, 100 = lightest, 900 = boldest

    font family:
      font name, backup font style
       h1 {
        font-family: caveat, cursive;
      }

    text align:
      text align right/center/left
       h1 {
        text-align: right;
      }

    font import:
      To import or embed a specific font such as found on fonts.google.com

      index.html
        <head>
          <link rel="preconnect" href="https://fonts.googleapis.com">
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
          <link href="https://fonts.googleapis.com/css2?family=Caveat&display=swap" rel="stylesheet">
        </head>

      style.css
        h1 {
          font-family: caveat, cursive;
	}


  c. inspecting css
  d. the css box model



07 Intermediate CSS

  a. specificity and inheritance
    cascade priority
      The following 4 options make up the cascade priority, position has the lowest
      priority and importance has the highest priority.  The bottom of the cascade
      gets the highest priority

      position
        The position of the css rule in a file that sets the same element matters.
        The lower down in the file the greater the priority because the last setting
        holds.
      specificity
        element, class, attribute, id
      type
        external, internal, inline
      importance
        adding a !important tag after a css rule gives it priority over the
        same rule without the !important tag



  b. combining css selectors
    when combining selectors such as tag, attribute, class or id there are
    different options to target the elements as required

    descendant
      .class tag {
        this will target all tag elements that are descendants of .class
      }

    child
      .class > tag {
        this will target all tag elements that are direct descendants of .class
      }

    group
      .class, tag {
        this will target all .class elements and all tag elements
      }

    chaining
      tag.class {
        Applied where all selectors are true.  Always start with the tag then
        chain .class or #id or attribute
      }
    combining selectors
      tag tag.class > #id {
      }


  c. css positioning
    static
      default postion, each element positioned under previous element
      .box {
        position: fixed;
        left: 20px
        top: 20px
      }
      here left and top have no effect and there is no need to specify fixed
      as this is the default position anyway
      
    relative
      postion is relative to static (default) position
      .box {
        position: relative;
        left: 20px
        top: 20px
      }
      Now the box will move 20px to the right and 20px down from its
      default poisition

    absolute
      position is relative to nearest ancestor that has position defined, if no ancestor has
      position defined position is relative to the top left of the webpage

    fixed
      position is relaitve to the top left of the browser window, when we scroll the page
      the element will move to hold position 


08 Advanced CSS

  a. css display
    by default an element such as <p>paragraph</p> will span the width of a webpage.
    we can set the width and height css properties to change the defaults. Elements
    will stack on top of each other

    display: inline;
      this option sets the span to the width of the element, width option has
      no effect on the width.  Inline elements will stack up side by side until
      there is no room left on the width of the webpage

    display: block;
      this option allows us set the width and height of the element and goes
      on its own line
      
    display: inline-block;
      this option allows us set the width and height of the element and can go
      on the same line as another element provided there is room for it and the
      other element, if it does not fit it will jump down to the next line

  b. css float
    use float to wrap text around images, apply float tag to img rule, float: left;
    img goes left ant text wraps to the right and bottom.  Dont use float for page
    layout.

    to clear float property from elements such as footer we can use clear: left;
    in css tag rule so the element ignores the float rule.  Float rule can be
    applied to more elements such as div to organise boxes on the webpage.

  c. how to create responsive website
    media queries, flexbox, grid, bootstrap

  d. media queries
    apply css rules based on the width of the browser window
    
    @media (min-width: 319px) and (max-width: 480px) {
      body {
        background-color: lightsalmon;
      }
    }
  
09 Flexbox
  Flexbox is good for single column or single row content.  This can be as an
  entire webpage (procong structure), or within box within a grid

  a. display flex
    all of the elements enclosed by the <div class=container> will occupy a flex
    column.  gap sets the distance between columns
    .container {
      display: flex (or inline-flex)
      gap 10px
    }
  b. flex direction
    default direction is row (flex-direction:row) so the columns stack side by
    side, we can set flex-direction:column so the conatiner items stack on top
    of each other and not side by side.

    The flex-basis: 100px sets the width or height of a column/row based on the
    flex-direction.  if flex direction is row then the basis sets the width, if
    it's column then basis sets the height.  Flex basis is set on the child
    element and not on the container

    To select all the children you can use .container > * {}

  
  c. flex layout

    By default all flex box elements have an order:0 property, setting the order
    > 0 will shift row item columns to the right, whith the highest order being
    most right.

    flex-wrap:nowrap; this is the default, the flex box gets pushed off the page
    flex-wrap:wrap; elements that don't fit the width wrap to the next line below.
    flex-wrap:wrap-reverse; elements that don't fit the width wrap to the line above.

    justify content controls the x direction for flex:direction:row
    justify-content: flex-start, flex-end, center, space-betwen, space-around

    align-items controls the y direction for flex:direction:row
    align-items: flex-start, flex-end, center, space-betwen, space-around

    flex-wrap/justify-content/align-items are .container properties

    align-self: flex-start, singles out a container child for alignment thats
    different to the container align-items.  This property must be applied on
    a child by child basis.


  d. flex sizing
    priority cascade width, flex-basis, min/max-width
    flex-grow: / flex-shrink: 0/1
    flex: grow shrink basis, flex: 0 1 100px
    flex_item_1{ flex 1 }, flex_item_2{ flex 2 }, item 2 will be twice as wide as 1

10 Grid
  Use grids for web pages with varying sizes of columns and rows

  a. display
    .container {
      display: grid;
      grid-template-columns: 1fr 1fr auto;
      grid-template-rows: 1fr 1fr;
      gap 5px;
    }
    fr - gives each column a fractional ratio
    repeat(n, 1fr) - repeat same command n times
    auto, automatically sizes the grid cell width to page or height to content
    minmax(400px, 800px), fix grid width to between minmax
    grid-column: span 2;

    .grid_item {
      grid-area: 1/2/3/4;
        {  grid-column-start: 2;
           grid-column-end: 3;
           grid-row-start: 1;
           grid-row-end: 4;
        }
        use -1 to pick the last columns and 1 for the first column
        grid cells can overlap and we can set alpha channel for transparancy of
        layers
    }  